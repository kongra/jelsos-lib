/*
 * This file is generated by jOOQ.
 */
package telsos.db.maas.tables;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import telsos.db.maas.Indexes;
import telsos.db.maas.Jee;
import telsos.db.maas.Keys;
import telsos.db.maas.tables.records.ProfilesRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Profiles extends TableImpl<ProfilesRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>jee.profiles</code>
   */
  public static final Profiles PROFILES = new Profiles();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ProfilesRecord> getRecordType() {
    return ProfilesRecord.class;
  }

  /**
   * The column <code>jee.profiles.id</code>.
   */
  public final TableField<ProfilesRecord, Long> ID = createField(DSL.name("id"),
      SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /**
   * The column <code>jee.profiles.email</code>.
   */
  public final TableField<ProfilesRecord, String> EMAIL = createField(
      DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>jee.profiles.first_name</code>.
   */
  public final TableField<ProfilesRecord, String> FIRST_NAME = createField(
      DSL.name("first_name"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>jee.profiles.amount</code>.
   */
  public final TableField<ProfilesRecord, Long> AMOUNT = createField(
      DSL.name("amount"), SQLDataType.BIGINT, this, "");

  /**
   * The column <code>jee.profiles.passwd</code>.
   */
  public final TableField<ProfilesRecord, String> PASSWD = createField(
      DSL.name("passwd"), SQLDataType.CLOB, this, "");

  private Profiles(Name alias, Table<ProfilesRecord> aliased) {
    this(alias, aliased, null);
  }

  private Profiles(Name alias, Table<ProfilesRecord> aliased,
      Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""),
        TableOptions.table());
  }

  /**
   * Create an aliased <code>jee.profiles</code> table reference
   */
  public Profiles(String alias) {
    this(DSL.name(alias), PROFILES);
  }

  /**
   * Create an aliased <code>jee.profiles</code> table reference
   */
  public Profiles(Name alias) {
    this(alias, PROFILES);
  }

  /**
   * Create a <code>jee.profiles</code> table reference
   */
  public Profiles() {
    this(DSL.name("profiles"), null);
  }

  public <O extends Record> Profiles(Table<O> child,
      ForeignKey<O, ProfilesRecord> key) {
    super(child, key, PROFILES);
  }

  @Override
  public Schema getSchema() {
    return Jee.JEE;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.PROFILES_EMAIL_IDX);
  }

  @Override
  public Identity<ProfilesRecord, Long> getIdentity() {
    return (Identity<ProfilesRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<ProfilesRecord> getPrimaryKey() {
    return Keys.PROFILES_PKEY;
  }

  @Override
  public List<UniqueKey<ProfilesRecord>> getKeys() {
    return Arrays.<UniqueKey<ProfilesRecord>>asList(Keys.PROFILES_PKEY);
  }

  @Override
  public Profiles as(String alias) {
    return new Profiles(DSL.name(alias), this);
  }

  @Override
  public Profiles as(Name alias) {
    return new Profiles(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Profiles rename(String name) {
    return new Profiles(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Profiles rename(Name name) {
    return new Profiles(name, null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<Long, String, String, Long, String> fieldsRow() {
    return (Row5) super.fieldsRow();
  }
}
